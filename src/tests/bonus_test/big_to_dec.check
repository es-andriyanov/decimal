#suite big_to_dec_test

#test big_to_dec_1
  BIG_decimal test = {{1, 2, 3, 0, 0, 0}};
  unsigned int scale = 1;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], test.bits[0]);
  ck_assert_int_eq(res.bits[1], test.bits[1]);
  ck_assert_int_eq(res.bits[2], test.bits[2]);
  ck_assert_int_eq(get_scale(res), scale);

#test big_to_dec_2
  BIG_decimal test = {{1, 2, 3, 0, 0, 0}};
  unsigned int scale = 0;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], test.bits[0]);
  ck_assert_int_eq(res.bits[1], test.bits[1]);
  ck_assert_int_eq(res.bits[2], test.bits[2]);
  ck_assert_int_eq(get_scale(res), scale);

#test big_to_dec_3
  BIG_decimal test = {{1, 2, 3, 0, 0, 0}};
  unsigned int scale = 3;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], test.bits[0]);
  ck_assert_int_eq(res.bits[1], test.bits[1]);
  ck_assert_int_eq(res.bits[2], test.bits[2]);
  ck_assert_int_eq(get_scale(res), scale);

// #test big_to_dec_4
//   BIG_decimal test = {{1, 2, 3, 0, 0, 0}};
//   unsigned int scale = -1;
//   int sign = 1;
//   s21_decimal res = {{0, 0, 0, 0}};

//   int returned = big_to_dec(test, &res, scale, sign, 0);

//   ck_assert_int_eq(returned, 1);

#test big_to_dec_5
  BIG_decimal test = {{1, 2, 3, 0, 0, 0}};
  unsigned int scale = 29;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};
  BIG_decimal div_ten = test;
  div_big_to_ten(&div_ten, NULL);


  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], div_ten.bits[0]);
  ck_assert_int_eq(res.bits[1], div_ten.bits[1]);
  ck_assert_int_eq(res.bits[2], div_ten.bits[2]);
  ck_assert_int_eq(get_scale(res), 28);

#test big_to_dec_6
  BIG_decimal test = {{1, 2, 3, 0, 0, 0}};
  unsigned int scale = 28;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], test.bits[0]);
  ck_assert_int_eq(res.bits[1], test.bits[1]);
  ck_assert_int_eq(res.bits[2], test.bits[2]);
  ck_assert_int_eq(get_scale(res), scale);

#test big_to_dec_7
  BIG_decimal test = {{-7, -1, -1, 9, 0, 0}};
  unsigned int scale = 1;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], -1);
  ck_assert_int_eq(res.bits[1], -1);
  ck_assert_int_eq(res.bits[2], -1);

#test big_to_dec_8
  BIG_decimal test = {{-5, -1, -1, 9, 0, 0}};
  unsigned int scale = 1;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 1);

#test big_to_dec_9
  BIG_decimal test = {{-2, -1, -1, 9, 0, 0}};
  unsigned int scale = 1;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 1);

#test big_to_dec_10
  BIG_decimal test = {{-17, -1, -1, 9, 0, 0}};
  unsigned int scale = 1;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], -2);
  ck_assert_int_eq(res.bits[1], -1);
  ck_assert_int_eq(res.bits[2], -1);

#test big_to_dec_11
  BIG_decimal test = {{-12, -1, -1, 9, 0, 0}};
  unsigned int scale = 1;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], -1);
  ck_assert_int_eq(res.bits[1], -1);
  ck_assert_int_eq(res.bits[2], -1);

#test big_to_dec_12
  BIG_decimal test = {{10, 10, 10, 0, 0, 0}};
  unsigned int scale = 29;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 1);
  ck_assert_int_eq(res.bits[2], 1);

#test big_to_dec_13
  BIG_decimal test = {{100, 100, 100, 0, 0, 0}};
  unsigned int scale = 30;
  int sign = 1;
  s21_decimal res = {{0, 0, 0, 0}};

  int returned = big_to_dec(test, &res, scale, sign, 0);

  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 1);
  ck_assert_int_eq(res.bits[2], 1);
