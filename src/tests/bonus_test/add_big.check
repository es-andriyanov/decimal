#suite add_big_test

#test add_big_1
  BIG_decimal test1 = {{(int)0b00000000000000000000000000000001,
                        (int)0b00000000000011100000000000000000,
                        (int)0b00000000000011100000000000000000,
                        (int)0b00000000000011100000000000000000,
                        (int)0b00000000000011100000000000000000,
                        (int)0b00000000000011100000000000000000}};

  BIG_decimal test2 = {{(int)0b00000000000000000000000000000010,
                        (int)0b00000000000000000000000000000000,
                        (int)0b00000000000000000000101010101010,
                        (int)0b00000000000000000000010101010101,
                        (int)0b00000000000000000000000000101010,
                        (int)0b00000000000000000000000000010101}};

  BIG_decimal res = {{0, 0, 0, 0, 0, 0}};
  int returned = add_big(test1, test2, &res);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], (int)0b00000000000000000000000000000011);
  ck_assert_int_eq(res.bits[1], (int)0b00000000000011100000000000000000);
  ck_assert_int_eq(res.bits[2], (int)0b00000000000011100000101010101010);
  ck_assert_int_eq(res.bits[3], (int)0b00000000000011100000010101010101);
  ck_assert_int_eq(res.bits[4], (int)0b00000000000011100000000000101010);
  ck_assert_int_eq(res.bits[5], (int)0b00000000000011100000000000010101);

#test add_big_2
  BIG_decimal test1 = {{(int)0b00000000000000000000000000000001, (int)0b00000000000000000000000000000001, (int)0b00000000000011100000000000000000, (int)0b00000000000011100000000000000000, (int)0b00000000000011100000000000000000, (int)0b00000000000011100000000000000000}};
  BIG_decimal test2 = {{(int)0b00000000000000000000000000000000, (int)0b11111111111111111111111111111111, (int)0b00000000000000000000101010101010, (int)0b00000000000000000000010101010101, (int)0b00000000000000000000000000101010, (int)0b00000000000000000000000000010101}};

  BIG_decimal res = {{0, 0, 0, 0, 0, 0}};
  int returned = add_big(test1, test2, &res);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], (int)0b00000000000000000000000000000001);
  ck_assert_int_eq(res.bits[1], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(res.bits[2], (int)0b00000000000011100000101010101011);
  ck_assert_int_eq(res.bits[3], (int)0b00000000000011100000010101010101);
  ck_assert_int_eq(res.bits[4], (int)0b00000000000011100000000000101010);
  ck_assert_int_eq(res.bits[5], (int)0b00000000000011100000000000010101);

#test add_big_3
  BIG_decimal test1 = {{(int)0b00000000000000000000000000000001, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};
  BIG_decimal test2 = {{(int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111}};

  BIG_decimal res = {{0, 0, 0, 0, 0, 0}};
  int returned = add_big(test1, test2, &res);
  ck_assert_int_eq(returned, 1);

#test add_big_4
  BIG_decimal test1 = {{(int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};
  BIG_decimal test2 = {{(int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};

  BIG_decimal res = {{0, 0, 0, 0, 0, 0}};
  int returned = add_big(test1, test2, &res);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(res.bits[1], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(res.bits[2], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(res.bits[3], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(res.bits[4], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(res.bits[5], (int)0b00000000000000000000000000000000);

#test add_big_5
  BIG_decimal test1 = {{(int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111}};
  BIG_decimal test2 = {{(int)0b00000000000000000000000000000001, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};

  BIG_decimal res = {{0, 0, 0, 0, 0, 0}};
  int returned = add_big(test1, test2, &res);
  ck_assert_int_eq(returned, 1);

#test add_big_6
  BIG_decimal test1 = {{(int)0b11111111111111111111111111111110, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111}};
  BIG_decimal test2 = {{(int)0b00000000000000000000000000000001, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};

  BIG_decimal res = {{0, 0, 0, 0, 0, 0}};
  int returned = add_big(test1, test2, &res);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(res.bits[3], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(res.bits[4], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(res.bits[5], (int)0b11111111111111111111111111111111);