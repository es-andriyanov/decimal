#suite left_shift_big_test

#test left_shift_big_1
  BIG_decimal test = {{(int)0b00000000000000000000000000000001, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};
  int returned = left_shift_big(&test);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(test.bits[0], (int)0b00000000000000000000000000000010);
  ck_assert_int_eq(test.bits[1], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[2], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[3], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[4], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[5], (int)0b00000000000000000000000000000000);

#test left_shift_big_2
  BIG_decimal test = {{(int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};
  int returned = left_shift_big(&test);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(test.bits[0], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[1], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[2], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[3], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[4], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[5], (int)0b00000000000000000000000000000000);

#test left_shift_big_3
  BIG_decimal test = {{(int)0b10000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};
  int returned = left_shift_big(&test);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(test.bits[0], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[1], (int)0b00000000000000000000000000000001);
  ck_assert_int_eq(test.bits[2], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[3], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[4], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[5], (int)0b00000000000000000000000000000000);

#test left_shift_big_4
  BIG_decimal test = {{(int)0b11000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000}};
  int returned = left_shift_big(&test);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(test.bits[0], (int)0b10000000000000000000000000000000);
  ck_assert_int_eq(test.bits[1], (int)0b00000000000000000000000000000001);
  ck_assert_int_eq(test.bits[2], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[3], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[4], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[5], (int)0b00000000000000000000000000000000);

#test left_shift_big_5
  BIG_decimal test = {{(int)0b00000000000000000000000000000001, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b00000000000000000000000000000000, (int)0b10000000000000000000000000000000}};
  int returned = left_shift_big(&test);
  ck_assert_int_eq(returned, 1);
  ck_assert_int_eq(test.bits[0], (int)0b00000000000000000000000000000001);
  ck_assert_int_eq(test.bits[1], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[2], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[3], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[4], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[5], (int)0b10000000000000000000000000000000);

#test left_shift_big_6
  BIG_decimal test = {{(int)0b10000000000000000000000000000000, (int)0b10000000000000000000000000000000, (int)0b10000000000000000000000000000000, (int)0b10000000000000000000000000000000, (int)0b10000000000000000000000000000000, (int)0b00000000000000000000000000000000}};
  int returned = left_shift_big(&test);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(test.bits[0], (int)0b00000000000000000000000000000000);
  ck_assert_int_eq(test.bits[1], (int)0b00000000000000000000000000000001);
  ck_assert_int_eq(test.bits[2], (int)0b00000000000000000000000000000001);
  ck_assert_int_eq(test.bits[3], (int)0b00000000000000000000000000000001);
  ck_assert_int_eq(test.bits[4], (int)0b00000000000000000000000000000001);
  ck_assert_int_eq(test.bits[5], (int)0b00000000000000000000000000000001);

#test left_shift_big_7
  BIG_decimal test = {{(int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b01111111111111111111111111111111}};
  int returned = left_shift_big(&test);
  ck_assert_int_eq(returned, 0);
  ck_assert_int_eq(test.bits[0], (int)0b11111111111111111111111111111110);
  ck_assert_int_eq(test.bits[1], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[2], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[3], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[4], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[5], (int)0b11111111111111111111111111111111);

#test left_shift_big_8
  BIG_decimal test = {{(int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111, (int)0b11111111111111111111111111111111}};
  int returned = left_shift_big(&test);
  ck_assert_int_eq(returned, 1);
  ck_assert_int_eq(test.bits[0], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[1], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[2], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[3], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[4], (int)0b11111111111111111111111111111111);
  ck_assert_int_eq(test.bits[5], (int)0b11111111111111111111111111111111);