#suite mul_test

#test mul_1
  //                            553402.32229718589441
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                      306254130323.91841215260109588
  //                      {{-1315984620, 641048440, 1660206967, 1114112}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_2
  //                            553402.32229718589441
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                     -306254130323.91841215260109588
  //                     {{-1315984620, 641048440, 1660206967, -2146369536}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_3
  //                            553402.32229718589441
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                         -30625413.027642905152882833253
  //                         {{-1635420315, -464649400, 1660206966, -2146107392}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1635420315);
  ck_assert_int_eq(res.bits[1], -464649400);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_4
  //                            553402.32229718589441
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                             30625.413265322639048333501402
  //                             {{-96820262, -960098822, 1660206979, 1572864}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -96820262);
  ck_assert_int_eq(res.bits[1], -960098822);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_5
  //                            553402.32229718589441
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                     3062541326532.2639051653915336
  //                     {{-1071373624, -960098821, 1660206979, 1048576}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1071373624);
  ck_assert_int_eq(res.bits[1], -960098821);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], 1048576);

#test mul_6
  //                            553402.32229718589441
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                         -35040882.993255304858948405311
  //                         {{-785315777, 1524233844, 1899570073, -2146107392}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -785315777);
  ck_assert_int_eq(res.bits[1], 1524233844);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_7
  //                            553402.32229718589441
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                      102084710115.89562030721259747
  //                      {{-1075914525, 1829806019, 553402322, 1114112}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_8
  //                            553402.32229718589441
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_9
  //                            553402.32229718589441
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_10
  //                            553402.32229718589441
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //         1020847101158956203072125.9747
  //         {{-1075914525, 1829806019, 553402322, 262144}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 262144);

#test mul_11
  //                            553402.32229718589441
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                  1020847101158956.2030721259747
  //                  {{-1075914525, 1829806019, 553402322, 851968}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_12
  //                            553402.32229718589441
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //        -1020847101158956204344951.3160
  //        {{-1232563000, 1829806022, 553402322, -2147221504}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1232563000);
  ck_assert_int_eq(res.bits[1], 1829806022);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2147221504);

#test mul_13
  //                            553402.32229718589441
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                  1020847104486539.0291877369878
  //                  {{-386131946, 987503939, 553402324, 851968}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -386131946);
  ck_assert_int_eq(res.bits[1], 987503939);
  ck_assert_int_eq(res.bits[2], 553402324);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_14
  //                            553402.32229718589441
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //        -1020847101158956203072125.9747
  //        {{-1075914525, 1829806019, 553402322, -2147221504}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2147221504);

#test mul_15
  //                            553402.32229718589441
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                 0.000055340232229718589441
  //                                 {{1, 2, 3, 1572864}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 2);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_16
  //                            553402.32229718589441
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                -0.000055340232229718589441
  //                                {{1, 2, 3, -2145910784}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 2);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], -2145910784);

#test mul_17
  //                            553402.32229718589441
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                      102084710092.12717154924394738
  //                      {{1942649074, 1276403697, 553402322, 1114112}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1942649074);
  ck_assert_int_eq(res.bits[1], 1276403697);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_18
  //                            553402.32229718589441
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                       10208471011.589562030721259747
  //                       {{-1075914525, 1829806019, 553402322, 1179648}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_19
  //                            553402.32229718589441
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                      -10208471032.981165912893044831
  //                      {{1821784159, -1779507672, 553402323, -2146304000}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1821784159);
  ck_assert_int_eq(res.bits[1], -1779507672);
  ck_assert_int_eq(res.bits[2], 553402323);
  ck_assert_int_eq(res.bits[3], -2146304000);

#test mul_20
  //                            553402.32229718589441
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                      -10208471011.589562030721259747
  //                      {{-1075914525, 1829806019, 553402322, -2146304000}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146304000);

#test mul_21
  //                            553402.32229718589441
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                 -1020847101158956.2030721259747
  //                 {{-1075914525, 1829806019, 553402322, -2146631680}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_22
  //                            553402.32229718589441
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //        -3062541303239184121526010.9588
  //        {{-1315984620, 641048440, 1660206967, -2147221504}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], -2147221504);

#test mul_23
  //                            553402.32229718589441
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                 -1020847101396640.6907624929401
  //                 {{1307293817, -1911758954, 553402322, -2146631680}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1307293817);
  ck_assert_int_eq(res.bits[1], -1911758954);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_24
  //                            553402.32229718589441
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                  3062541303239184.1215260109588
  //                  {{-1315984620, 641048440, 1660206967, 851968}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_25
  //                            553402.32229718589441
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                 -3062541303239184.1215260109588
  //                 {{-1315984620, 641048440, 1660206967, -2146631680}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_26
  //                            553402.32229718589441
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //               -102084710139664069.07624929401
  //               {{1307293817, -1911758954, 553402322, -2146762752}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1307293817);
  ck_assert_int_eq(res.bits[1], -1911758954);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146762752);

#test mul_27
  //                            553402.32229718589441
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                     -306254130323.91841220240730488
  //                     {{-630331016, 641048441, 1660206967, -2146369536}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -630331016);
  ck_assert_int_eq(res.bits[1], 641048441);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_28
  //                            553402.32229718589441
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //                102084710139664069.07624929401
  //                {{1307293817, -1911758954, 553402322, 720896}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1307293817);
  ck_assert_int_eq(res.bits[1], -1911758954);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 720896);

#test mul_29
  //                            553402.32229718589441
  // *                              10
  //   ------------------------------------------------
  //                           5534023.22297185894410
  //                           {{10, 20, 30, 917504}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 10);
  ck_assert_int_eq(res.bits[1], 20);
  ck_assert_int_eq(res.bits[2], 30);
  ck_assert_int_eq(res.bits[3], 917504);

#test mul_30
  //                            553402.32229718589441
  // *                      -133456435
  //   ------------------------------------------------
  //                   -73855101054503.44000024502835
  //                   {{133456435, 266912870, 400369305, -2146566144}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 133456435);
  ck_assert_int_eq(res.bits[1], 266912870);
  ck_assert_int_eq(res.bits[2], 400369305);
  ck_assert_int_eq(res.bits[3], -2146566144);

#test mul_31
  //                            553402.32229718589441
  // *                              -0.2343453
  //   ------------------------------------------------
  //                           -129687.233239430717581279773
  //                           {{2343453, 4686906, 7030359, -2146107392}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2343453);
  ck_assert_int_eq(res.bits[1], 4686906);
  ck_assert_int_eq(res.bits[2], 7030359);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_32
  //                            553402.32229718589441
  // *                             127.2343
  //   ------------------------------------------------
  //                          70411757.095856839245130263
  //                          {{1272343, 2544686, 3817029, 1179648}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1272343);
  ck_assert_int_eq(res.bits[1], 2544686);
  ck_assert_int_eq(res.bits[2], 3817029);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_33
  //                            553402.32229718589441
  // *                     -2147483648
  //   ------------------------------------------------
  //                 -1188422437898432.5046617296077
  //                 {{214748365, -2147483648, 644245094, -2146631680}};

  es_decimal one = {{1, 2, 3, 917504}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 214748365);
  ck_assert_int_eq(res.bits[1], -2147483648);
  ck_assert_int_eq(res.bits[2], 644245094);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_34
  //                           -553402.32229718589441
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                     -306254130323.91841215260109588
  //                     {{-1315984620, 641048440, 1660206967, -2146369536}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_35
  //                           -553402.32229718589441
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                      306254130323.91841215260109588
  //                      {{-1315984620, 641048440, 1660206967, 1114112}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_36
  //                           -553402.32229718589441
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                          30625413.027642905152882833253
  //                          {{-1635420315, -464649400, 1660206966, 1376256}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1635420315);
  ck_assert_int_eq(res.bits[1], -464649400);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], 1376256);

#test mul_37
  //                           -553402.32229718589441
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                            -30625.413265322639048333501402
  //                            {{-96820262, -960098822, 1660206979, -2145910784}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -96820262);
  ck_assert_int_eq(res.bits[1], -960098822);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2145910784);

#test mul_38
  //                           -553402.32229718589441
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                    -3062541326532.2639051653915336
  //                    {{-1071373624, -960098821, 1660206979, -2146435072}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1071373624);
  ck_assert_int_eq(res.bits[1], -960098821);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2146435072);

#test mul_39
  //                           -553402.32229718589441
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                          35040882.993255304858948405311
  //                          {{-785315777, 1524233844, 1899570073, 1376256}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -785315777);
  ck_assert_int_eq(res.bits[1], 1524233844);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], 1376256);

#test mul_40
  //                           -553402.32229718589441
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                     -102084710115.89562030721259747
  //                     {{-1075914525, 1829806019, 553402322, -2146369536}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_41
  //                           -553402.32229718589441
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_42
  //                           -553402.32229718589441
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_43
  //                           -553402.32229718589441
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //        -1020847101158956203072125.9747
  //        {{-1075914525, 1829806019, 553402322, -2147221504}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2147221504);

#test mul_44
  //                           -553402.32229718589441
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                 -1020847101158956.2030721259747
  //                 {{-1075914525, 1829806019, 553402322, -2146631680}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_45
  //                           -553402.32229718589441
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //         1020847101158956204344951.3160
  //         {{-1232563000, 1829806022, 553402322, 262144}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1232563000);
  ck_assert_int_eq(res.bits[1], 1829806022);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 262144);

#test mul_46
  //                           -553402.32229718589441
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                 -1020847104486539.0291877369878
  //                 {{-386131946, 987503939, 553402324, -2146631680}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -386131946);
  ck_assert_int_eq(res.bits[1], 987503939);
  ck_assert_int_eq(res.bits[2], 553402324);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_47
  //                           -553402.32229718589441
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //         1020847101158956203072125.9747
  //         {{-1075914525, 1829806019, 553402322, 262144}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 262144);

#test mul_48
  //                           -553402.32229718589441
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                -0.000055340232229718589441
  //                                {{1, 2, 3, -2145910784}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 2);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], -2145910784);

#test mul_49
  //                           -553402.32229718589441
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                 0.000055340232229718589441
  //                                 {{1, 2, 3, 1572864}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 2);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_50
  //                           -553402.32229718589441
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                     -102084710092.12717154924394738
  //                     {{1942649074, 1276403697, 553402322, -2146369536}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1942649074);
  ck_assert_int_eq(res.bits[1], 1276403697);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_51
  //                           -553402.32229718589441
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                      -10208471011.589562030721259747
  //                      {{-1075914525, 1829806019, 553402322, -2146304000}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146304000);

#test mul_52
  //                           -553402.32229718589441
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                       10208471032.981165912893044831
  //                       {{1821784159, -1779507672, 553402323, 1179648}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1821784159);
  ck_assert_int_eq(res.bits[1], -1779507672);
  ck_assert_int_eq(res.bits[2], 553402323);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_53
  //                           -553402.32229718589441
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                       10208471011.589562030721259747
  //                       {{-1075914525, 1829806019, 553402322, 1179648}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_54
  //                           -553402.32229718589441
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                  1020847101158956.2030721259747
  //                  {{-1075914525, 1829806019, 553402322, 851968}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_55
  //                           -553402.32229718589441
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //         3062541303239184121526010.9588
  //         {{-1315984620, 641048440, 1660206967, 262144}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], 262144);

#test mul_56
  //                           -553402.32229718589441
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                  1020847101396640.6907624929401
  //                  {{1307293817, -1911758954, 553402322, 851968}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1307293817);
  ck_assert_int_eq(res.bits[1], -1911758954);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_57
  //                           -553402.32229718589441
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                 -3062541303239184.1215260109588
  //                 {{-1315984620, 641048440, 1660206967, -2146631680}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_58
  //                           -553402.32229718589441
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                  3062541303239184.1215260109588
  //                  {{-1315984620, 641048440, 1660206967, 851968}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1315984620);
  ck_assert_int_eq(res.bits[1], 641048440);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_59
  //                           -553402.32229718589441
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //                102084710139664069.07624929401
  //                {{1307293817, -1911758954, 553402322, 720896}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1307293817);
  ck_assert_int_eq(res.bits[1], -1911758954);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 720896);

#test mul_60
  //                           -553402.32229718589441
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                      306254130323.91841220240730488
  //                      {{-630331016, 641048441, 1660206967, 1114112}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -630331016);
  ck_assert_int_eq(res.bits[1], 641048441);
  ck_assert_int_eq(res.bits[2], 1660206967);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_61
  //                           -553402.32229718589441
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //               -102084710139664069.07624929401
  //               {{1307293817, -1911758954, 553402322, -2146762752}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1307293817);
  ck_assert_int_eq(res.bits[1], -1911758954);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146762752);

#test mul_62
  //                           -553402.32229718589441
  // *                              10
  //   ------------------------------------------------
  //                          -5534023.22297185894410
  //                          {{10, 20, 30, -2146566144}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 10);
  ck_assert_int_eq(res.bits[1], 20);
  ck_assert_int_eq(res.bits[2], 30);
  ck_assert_int_eq(res.bits[3], -2146566144);

#test mul_63
  //                           -553402.32229718589441
  // *                      -133456435
  //   ------------------------------------------------
  //                    73855101054503.44000024502835
  //                    {{133456435, 266912870, 400369305, 917504}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 133456435);
  ck_assert_int_eq(res.bits[1], 266912870);
  ck_assert_int_eq(res.bits[2], 400369305);
  ck_assert_int_eq(res.bits[3], 917504);

#test mul_64
  //                           -553402.32229718589441
  // *                              -0.2343453
  //   ------------------------------------------------
  //                            129687.233239430717581279773
  //                            {{2343453, 4686906, 7030359, 1376256}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2343453);
  ck_assert_int_eq(res.bits[1], 4686906);
  ck_assert_int_eq(res.bits[2], 7030359);
  ck_assert_int_eq(res.bits[3], 1376256);

#test mul_65
  //                           -553402.32229718589441
  // *                             127.2343
  //   ------------------------------------------------
  //                         -70411757.095856839245130263
  //                         {{1272343, 2544686, 3817029, -2146304000}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1272343);
  ck_assert_int_eq(res.bits[1], 2544686);
  ck_assert_int_eq(res.bits[2], 3817029);
  ck_assert_int_eq(res.bits[3], -2146304000);

#test mul_66
  //                           -553402.32229718589441
  // *                     -2147483648
  //   ------------------------------------------------
  //                  1188422437898432.5046617296077
  //                  {{214748365, -2147483648, 644245094, 851968}};

  es_decimal one = {{1, 2, 3, -2146566144}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 214748365);
  ck_assert_int_eq(res.bits[1], -2147483648);
  ck_assert_int_eq(res.bits[2], 644245094);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_67
  //                               -55.340232221137244782625
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                         -30625413.027642905152882833253
  //                         {{-1635420315, -464649400, 1660206966, -2146107392}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1635420315);
  ck_assert_int_eq(res.bits[1], -464649400);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_68
  //                               -55.340232221137244782625
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                          30625413.027642905152882833253
  //                          {{-1635420315, -464649400, 1660206966, 1376256}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1635420315);
  ck_assert_int_eq(res.bits[1], -464649400);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], 1376256);

#test mul_69
  //                               -55.340232221137244782625
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                              3062.5413022893969091241951681
  //                              {{-1218461247, -1570347240, 1660206966, 1638400}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1218461247);
  ck_assert_int_eq(res.bits[1], -1570347240);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], 1638400);

#test mul_70
  //                               -55.340232221137244782625
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                                -3.0625413260573702949836762297
  //                                {{2118986937, -2065796670, 1660206979, -2145648640}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2118986937);
  ck_assert_int_eq(res.bits[1], -2065796670);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2145648640);

#test mul_71
  //                               -55.340232221137244782625
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                        -306254132.60573702953157176230
  //                        {{1144433574, -2065796669, 1660206979, -2146172928}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1144433574);
  ck_assert_int_eq(res.bits[1], -2065796669);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_72
  //                               -55.340232221137244782625
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                              3504.0882987821683025727488412
  //                              {{71336348, 259120176, 1899570073, 1638400}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 71336348);
  ck_assert_int_eq(res.bits[1], 259120176);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], 1638400);

#test mul_73
  //                               -55.340232221137244782625
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                         -10208471.010006583343139312320
  //                         {{126407360, 1461240073, 553402322, -2146107392}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_74
  //                               -55.340232221137244782625
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_75
  //                               -55.340232221137244782625
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_76
  //                               -55.340232221137244782625
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //            -102084710100065833431.39312320
  //            {{126407360, 1461240073, 553402322, -2146959360}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146959360);

#test mul_77
  //                               -55.340232221137244782625
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                     -102084710100.06583343139312320
  //                     {{126407360, 1461240073, 553402322, -2146369536}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_78
  //                               -55.340232221137244782625
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //             102084710100065833558.67565731
  //             {{-30241117, 1461240075, 553402322, 524288}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -30241117);
  ck_assert_int_eq(res.bits[1], 1461240075);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 524288);

#test mul_79
  //                               -55.340232221137244782625
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                     -102084710432.82411599135499198
  //                     {{-48766018, 618937991, 553402324, -2146369536}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -48766018);
  ck_assert_int_eq(res.bits[1], 618937991);
  ck_assert_int_eq(res.bits[2], 553402324);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_80
  //                               -55.340232221137244782625
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //             102084710100065833431.39312320
  //             {{126407360, 1461240073, 553402322, 524288}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 524288);

#test mul_81
  //                               -55.340232221137244782625
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                -0.0000000055340232221137244783
  //                                {{8589935, 0, 3, -2145648640}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 8589935);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], -2145648640);

#test mul_82
  //                               -55.340232221137244782625
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                 0.0000000055340232221137244783
  //                                 {{8589935, 0, 3, 1835008}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 8589935);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], 1835008);

#test mul_83
  //                               -55.340232221137244782625
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                         -10208471.007629738467711013257
  //                         {{-781430391, 907837750, 553402322, -2146107392}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -781430391);
  ck_assert_int_eq(res.bits[1], 907837750);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_84
  //                               -55.340232221137244782625
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                          -1020847.1010006583343139312320
  //                          {{126407360, 1461240073, 553402322, -2146041856}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146041856);

#test mul_85
  //                               -55.340232221137244782625
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                           1020847.1031398187221994003884
  //                           {{-292987476, 2146893676, 553402323, 1441792}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -292987476);
  ck_assert_int_eq(res.bits[1], 2146893676);
  ck_assert_int_eq(res.bits[2], 553402323);
  ck_assert_int_eq(res.bits[3], 1441792);

#test mul_86
  //                               -55.340232221137244782625
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                           1020847.1010006583343139312320
  //                           {{126407360, 1461240073, 553402322, 1441792}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 1441792);

#test mul_87
  //                               -55.340232221137244782625
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                      102084710100.06583343139312320
  //                      {{126407360, 1461240073, 553402322, 1114112}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_88
  //                               -55.340232221137244782625
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //             306254130276429051528.82833253
  //             {{-1635420315, -464649400, 1660206966, 524288}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1635420315);
  ck_assert_int_eq(res.bits[1], -464649400);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], 524288);

#test mul_89
  //                               -55.340232221137244782625
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                      102084710123.83428219674416027
  //                      {{2141049755, 2014642395, 553402322, 1114112}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2141049755);
  ck_assert_int_eq(res.bits[1], 2014642395);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_90
  //                               -55.340232221137244782625
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                     -306254130276.42905152882833253
  //                     {{-1635420315, -464649400, 1660206966, -2146369536}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1635420315);
  ck_assert_int_eq(res.bits[1], -464649400);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_91
  //                               -55.340232221137244782625
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                      306254130276.42905152882833253
  //                      {{-1635420315, -464649400, 1660206966, 1114112}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1635420315);
  ck_assert_int_eq(res.bits[1], -464649400);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_92
  //                               -55.340232221137244782625
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //                    10208471012383.428219674416027
  //                    {{2141049755, 2014642395, 553402322, 983040}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2141049755);
  ck_assert_int_eq(res.bits[1], 2014642395);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 983040);

#test mul_93
  //                               -55.340232221137244782625
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                          30625413.027642905157863454153
  //                          {{-949766711, -464649399, 1660206966, 1376256}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -949766711);
  ck_assert_int_eq(res.bits[1], -464649399);
  ck_assert_int_eq(res.bits[2], 1660206966);
  ck_assert_int_eq(res.bits[3], 1376256);

#test mul_94
  //                               -55.340232221137244782625
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //                   -10208471012383.428219674416027
  //                   {{2141049755, 2014642395, 553402322, -2146500608}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2141049755);
  ck_assert_int_eq(res.bits[1], 2014642395);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146500608);

#test mul_95
  //                               -55.340232221137244782625
  // *                              10
  //   ------------------------------------------------
  //                              -553.402322211372447826250
  //                              {{330, 20, 30000, -2146107392}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 330);
  ck_assert_int_eq(res.bits[1], 20);
  ck_assert_int_eq(res.bits[2], 30000);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_96
  //                               -55.340232221137244782625
  // *                      -133456435
  //   ------------------------------------------------
  //                        7385510104.3051083344114824419
  //                        {{-1244449565, 2669128, -291274246, 1245184}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1244449565);
  ck_assert_int_eq(res.bits[1], 2669128);
  ck_assert_int_eq(res.bits[2], -291274246);
  ck_assert_int_eq(res.bits[3], 1245184);

#test mul_97
  //                               -55.340232221137244782625
  // *                              -0.2343453
  //   ------------------------------------------------
  //                                12.968723321932073969757690412
  //                                {{-1710253524, 468690, 703035900, 1769472}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1710253524);
  ck_assert_int_eq(res.bits[1], 468690);
  ck_assert_int_eq(res.bits[2], 703035900);
  ck_assert_int_eq(res.bits[3], 1769472);

#test mul_98
  //                               -55.340232221137244782625
  // *                             127.2343
  //   ------------------------------------------------
  //                             -7041.1757084938425438459440375
  //                             {{41987319, 2544686, -477938296, -2145845248}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 41987319);
  ck_assert_int_eq(res.bits[1], 2544686);
  ck_assert_int_eq(res.bits[2], -477938296);
  ck_assert_int_eq(res.bits[3], -2145845248);

#test mul_99
  //                               -55.340232221137244782625
  // *                     -2147483648
  //   ------------------------------------------------
  //                      118842243771.41495313446050202
  //                      {{563714458, 1718416415, 644245094, 1114112}};

  es_decimal one = {{33, 2, 3000, -2146107392}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 563714458);
  ck_assert_int_eq(res.bits[1], 1718416415);
  ck_assert_int_eq(res.bits[2], 644245094);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_100
  //                                 0.055340232650625384458
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                             30625.413265322639048333501402
  //                             {{-96820262, -960098822, 1660206979, 1572864}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -96820262);
  ck_assert_int_eq(res.bits[1], -960098822);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_101
  //                                 0.055340232650625384458
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                            -30625.413265322639048333501402
  //                            {{-96820262, -960098822, 1660206979, -2145910784}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -96820262);
  ck_assert_int_eq(res.bits[1], -960098822);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2145910784);

#test mul_102
  //                                 0.055340232650625384458
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                                -3.0625413260573702949836762297
  //                                {{2118986937, -2065796670, 1660206979, -2145648640}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2118986937);
  ck_assert_int_eq(res.bits[1], -2065796670);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2145648640);

#test mul_103
  //                                 0.055340232650625384458
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                                 0.0030625413498253438653032194
  //                                 {{1107027714, -32626017, 1660206, 1835008}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1107027714);
  ck_assert_int_eq(res.bits[1], -32626017);
  ck_assert_int_eq(res.bits[2], 1660206);
  ck_assert_int_eq(res.bits[3], 1835008);

#test mul_104
  //                                 0.055340232650625384458
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                            306254.13498253438656352608090
  //                            {{-2048401574, 1733721626, 1660206992, 1507328}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -2048401574);
  ck_assert_int_eq(res.bits[1], 1733721626);
  ck_assert_int_eq(res.bits[2], 1660206992);
  ck_assert_int_eq(res.bits[3], 1507328);

#test mul_105
  //                                 0.055340232650625384458
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                                -3.5040883259769288646251204726
  //                                {{-979939210, -847653208, 1899570087, -2145648640}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -979939210);
  ck_assert_int_eq(res.bits[1], -847653208);
  ck_assert_int_eq(res.bits[2], 1899570087);
  ck_assert_int_eq(res.bits[3], -2145648640);

#test mul_106
  //                                 0.055340232650625384458
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                             10208.471089233161314438326752
  //                             {{-1801868832, -1567221264, 553402326, 1572864}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_107
  //                                 0.055340232650625384458
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_108
  //                                 0.055340232650625384458
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_109
  //                                 0.055340232650625384458
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //                102084710892331613.14438326752
  //                {{-1801868832, -1567221264, 553402326, 720896}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 720896);

#test mul_110
  //                                 0.055340232650625384458
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                         102084710.89233161314438326752
  //                         {{-1801868832, -1567221264, 553402326, 1310720}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1310720);

#test mul_111
  //                                 0.055340232650625384458
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //               -102084710892331613.27166580262
  //               {{-1958517210, -1567221261, 553402326, -2146762752}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1958517210);
  ck_assert_int_eq(res.bits[1], -1567221261);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146762752);

#test mul_112
  //                                 0.055340232650625384458
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                         102084711.22508989828683765580
  //                         {{-1425828020, 1885444011, 553402328, 1310720}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1425828020);
  ck_assert_int_eq(res.bits[1], 1885444011);
  ck_assert_int_eq(res.bits[2], 553402328);
  ck_assert_int_eq(res.bits[3], 1310720);

#test mul_113
  //                                 0.055340232650625384458
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //               -102084710892331613.14438326752
  //               {{-1801868832, -1567221264, 553402326, -2146762752}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146762752);

#test mul_114
  //                                 0.055340232650625384458
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                 0.0000000000055340232650625384
  //                                 {{-51539608, 12884901, 0, 1835008}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -51539608);
  ck_assert_int_eq(res.bits[1], 12884901);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1835008);

#test mul_115
  //                                 0.055340232650625384458
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                -0.0000000000055340232650625384
  //                                {{-51539608, 12884901, 0, -2145648640}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -51539608);
  ck_assert_int_eq(res.bits[1], 12884901);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2145648640);

#test mul_116
  //                                 0.055340232650625384458
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                             10208.471086856316420563652550
  //                             {{318754758, -2120623590, 553402326, 1572864}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 318754758);
  ck_assert_int_eq(res.bits[1], -2120623590);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_117
  //                                 0.055340232650625384458
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                              1020.8471089233161314438326752
  //                              {{-1801868832, -1567221264, 553402326, 1638400}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1638400);

#test mul_118
  //                                 0.055340232650625384458
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                             -1020.8471110624765359310394570
  //                             {{587355338, -881567621, 553402327, -2145845248}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 587355338);
  ck_assert_int_eq(res.bits[1], -881567621);
  ck_assert_int_eq(res.bits[2], 553402327);
  ck_assert_int_eq(res.bits[3], -2145845248);

#test mul_119
  //                                 0.055340232650625384458
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                             -1020.8471089233161314438326752
  //                             {{-1801868832, -1567221264, 553402326, -2145845248}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2145845248);

#test mul_120
  //                                 0.055340232650625384458
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                        -102084710.89233161314438326752
  //                        {{-1801868832, -1567221264, 553402326, -2146172928}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_121
  //                                 0.055340232650625384458
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //               -306254132653226390.48333501402
  //               {{-96820262, -960098822, 1660206979, -2146762752}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -96820262);
  ck_assert_int_eq(res.bits[1], -960098822);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2146762752);

#test mul_122
  //                                 0.055340232650625384458
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                        -102084710.91610006209419805607
  //                        {{1479279527, -1013818937, 553402326, -2146172928}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1479279527);
  ck_assert_int_eq(res.bits[1], -1013818937);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_123
  //                                 0.055340232650625384458
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                         306254132.65322639048333501402
  //                         {{-96820262, -960098822, 1660206979, 1310720}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -96820262);
  ck_assert_int_eq(res.bits[1], -960098822);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], 1310720);

#test mul_124
  //                                 0.055340232650625384458
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                        -306254132.65322639048333501402
  //                        {{-96820262, -960098822, 1660206979, -2146172928}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -96820262);
  ck_assert_int_eq(res.bits[1], -960098822);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_125
  //                                 0.055340232650625384458
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //                      -10208471091.610006209419805607
  //                      {{1479279527, -1013818937, 553402326, -2146304000}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1479279527);
  ck_assert_int_eq(res.bits[1], -1013818937);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146304000);

#test mul_126
  //                                 0.055340232650625384458
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                            -30625.413265322639053314122341
  //                            {{588833381, -960098820, 1660206979, -2145910784}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 588833381);
  ck_assert_int_eq(res.bits[1], -960098820);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2145910784);

#test mul_127
  //                                 0.055340232650625384458
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //                       10208471091.610006209419805607
  //                       {{1479279527, -1013818937, 553402326, 1179648}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1479279527);
  ck_assert_int_eq(res.bits[1], -1013818937);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_128
  //                                 0.055340232650625384458
  // *                              10
  //   ------------------------------------------------
  //                                 0.553402326506253844580
  //                                 {{100, 1000, 30, 1376256}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 100);
  ck_assert_int_eq(res.bits[1], 1000);
  ck_assert_int_eq(res.bits[2], 30);
  ck_assert_int_eq(res.bits[3], 1376256);

#test mul_129
  //                                 0.055340232650625384458
  // *                      -133456435
  //   ------------------------------------------------
  //                          -7385510.161623064330269087230
  //                          {{1334564350, 460741612, 400369308, -2146107392}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1334564350);
  ck_assert_int_eq(res.bits[1], 460741612);
  ck_assert_int_eq(res.bits[2], 400369308);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_130
  //                                 0.055340232650625384458
  // *                              -0.2343453
  //   ------------------------------------------------
  //                                -0.0129687234225806009084253474
  //                                {{23434530, 234345300, 7030359, -2145648640}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 23434530);
  ck_assert_int_eq(res.bits[1], 234345300);
  ck_assert_int_eq(res.bits[2], 7030359);
  ck_assert_int_eq(res.bits[3], -2145648640);

#test mul_131
  //                                 0.055340232650625384458
  // *                             127.2343
  //   ------------------------------------------------
  //                                 7.0411757631394653537445094
  //                                 {{12723430, 127234300, 3817029, 1638400}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 12723430);
  ck_assert_int_eq(res.bits[1], 127234300);
  ck_assert_int_eq(res.bits[2], 3817029);
  ck_assert_int_eq(res.bits[3], 1638400);

#test mul_132
  //                                 0.055340232650625384458
  // *                     -2147483648
  //   ------------------------------------------------
  //                        -118842244.69373371009726834278
  //                        {{-429496730, 1717986918, 644245099, -2146172928}};

  es_decimal one = {{10, 100, 3, 1376256}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -429496730);
  ck_assert_int_eq(res.bits[1], 1717986918);
  ck_assert_int_eq(res.bits[2], 644245099);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_133
  //                           5534023.2650625384464
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                     3062541326532.2639051653915336
  //                     {{-1071373624, -960098821, 1660206979, 1048576}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1071373624);
  ck_assert_int_eq(res.bits[1], -960098821);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], 1048576);

#test mul_134
  //                           5534023.2650625384464
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                    -3062541326532.2639051653915336
  //                    {{-1071373624, -960098821, 1660206979, -2146435072}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1071373624);
  ck_assert_int_eq(res.bits[1], -960098821);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2146435072);

#test mul_135
  //                           5534023.2650625384464
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                        -306254132.60573702953157176230
  //                        {{1144433574, -2065796669, 1660206979, -2146172928}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1144433574);
  ck_assert_int_eq(res.bits[1], -2065796669);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_136
  //                           5534023.2650625384464
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                            306254.13498253438656352608090
  //                            {{-2048401574, 1733721626, 1660206992, 1507328}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -2048401574);
  ck_assert_int_eq(res.bits[1], 1733721626);
  ck_assert_int_eq(res.bits[2], 1660206992);
  ck_assert_int_eq(res.bits[3], 1507328);

#test mul_137
  //                           5534023.2650625384464
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                    30625413498253.438659673022049
  //                    {{1272012385, 1733721627, 1660206992, 983040}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1272012385);
  ck_assert_int_eq(res.bits[1], 1733721627);
  ck_assert_int_eq(res.bits[2], 1660206992);
  ck_assert_int_eq(res.bits[3], 983040);

#test mul_138
  //                           5534023.2650625384464
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                        -350408832.59769288650050344872
  //                        {{-1475766360, -847653207, 1899570087, -2146172928}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1475766360);
  ck_assert_int_eq(res.bits[1], -847653207);
  ck_assert_int_eq(res.bits[2], 1899570087);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_139
  //                           5534023.2650625384464
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                     1020847108923.3161315545131397
  //                     {{-695064187, -1567221264, 553402326, 1048576}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1048576);

#test mul_140
  //                           5534023.2650625384464
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_141
  //                           5534023.2650625384464
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_142
  //                           5534023.2650625384464
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //        10208471089233161315545131.397
  //        {{-695064187, -1567221264, 553402326, 196608}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 196608);

#test mul_143
  //                           5534023.2650625384464
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                 10208471089233161.315545131397
  //                 {{-695064187, -1567221264, 553402326, 786432}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 786432);

#test mul_144
  //                           5534023.2650625384464
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //       -10208471089233161328273384.907
  //       {{-851712565, -1567221261, 553402326, -2147287040}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -851712565);
  ck_assert_int_eq(res.bits[1], -1567221261);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2147287040);

#test mul_145
  //                           5534023.2650625384464
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                 10208471122508989.829790570228
  //                 {{-319023372, 1885444011, 553402328, 786432}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -319023372);
  ck_assert_int_eq(res.bits[1], 1885444011);
  ck_assert_int_eq(res.bits[2], 553402328);
  ck_assert_int_eq(res.bits[3], 786432);

#test mul_146
  //                           5534023.2650625384464
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //       -10208471089233161315545131.397
  //       {{-695064187, -1567221264, 553402326, -2147287040}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2147287040);

#test mul_147
  //                           5534023.2650625384464
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                 0.00055340232650625384464
  //                                 {{16, 100, 3, 1507328}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 16);
  ck_assert_int_eq(res.bits[1], 100);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], 1507328);

#test mul_148
  //                           5534023.2650625384464
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                -0.00055340232650625384464
  //                                {{16, 100, 3, -2145976320}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 16);
  ck_assert_int_eq(res.bits[1], 100);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], -2145976320);

#test mul_149
  //                           5534023.2650625384464
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                     1020847108685.6316421670457195
  //                     {{1425559403, -2120623590, 553402326, 1048576}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1425559403);
  ck_assert_int_eq(res.bits[1], -2120623590);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1048576);

#test mul_150
  //                           5534023.2650625384464
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                      102084710892.33161315545131397
  //                      {{-695064187, -1567221264, 553402326, 1114112}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_151
  //                           5534023.2650625384464
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                     -102084711106.24765360417199217
  //                     {{1694159985, -881567621, 553402327, -2146369536}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1694159985);
  ck_assert_int_eq(res.bits[1], -881567621);
  ck_assert_int_eq(res.bits[2], 553402327);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_152
  //                           5534023.2650625384464
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                     -102084710892.33161315545131397
  //                     {{-695064187, -1567221264, 553402326, -2146369536}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_153
  //                           5534023.2650625384464
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                -10208471089233161.315545131397
  //                {{-695064187, -1567221264, 553402326, -2146697216}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146697216);

#test mul_154
  //                           5534023.2650625384464
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //       -30625413265322639051653915.336
  //       {{-1071373624, -960098821, 1660206979, -2147287040}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1071373624);
  ck_assert_int_eq(res.bits[1], -960098821);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2147287040);

#test mul_155
  //                           5534023.2650625384464
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                -10208471091610006.210526610252
  //                {{-1708883124, -1013818937, 553402326, -2146697216}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1708883124);
  ck_assert_int_eq(res.bits[1], -1013818937);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146697216);

#test mul_156
  //                           5534023.2650625384464
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                 30625413265322639.051653915336
  //                 {{-1071373624, -960098821, 1660206979, 786432}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1071373624);
  ck_assert_int_eq(res.bits[1], -960098821);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], 786432);

#test mul_157
  //                           5534023.2650625384464
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                -30625413265322639.051653915336
  //                {{-1071373624, -960098821, 1660206979, -2146697216}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1071373624);
  ck_assert_int_eq(res.bits[1], -960098821);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2146697216);

#test mul_158
  //                           5534023.2650625384464
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //              -1020847109161000621.0526610252
  //              {{-1708883124, -1013818937, 553402326, -2146828288}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1708883124);
  ck_assert_int_eq(res.bits[1], -1013818937);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], -2146828288);

#test mul_159
  //                           5534023.2650625384464
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                    -3062541326532.2639056634536274
  //                    {{-385719982, -960098820, 1660206979, -2146435072}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -385719982);
  ck_assert_int_eq(res.bits[1], -960098820);
  ck_assert_int_eq(res.bits[2], 1660206979);
  ck_assert_int_eq(res.bits[3], -2146435072);

#test mul_160
  //                           5534023.2650625384464
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //               1020847109161000621.0526610252
  //               {{-1708883124, -1013818937, 553402326, 655360}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1708883124);
  ck_assert_int_eq(res.bits[1], -1013818937);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 655360);

#test mul_161
  //                           5534023.2650625384464
  // *                              10
  //   ------------------------------------------------
  //                          55340232.6506253844640
  //                          {{160, 1000, 30, 851968}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 160);
  ck_assert_int_eq(res.bits[1], 1000);
  ck_assert_int_eq(res.bits[2], 30);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_162
  //                           5534023.2650625384464
  // *                      -133456435
  //   ------------------------------------------------
  //                  -738551016162306.4331069825840
  //                  {{2135302960, 460741612, 400369308, -2146631680}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2135302960);
  ck_assert_int_eq(res.bits[1], 460741612);
  ck_assert_int_eq(res.bits[2], 400369308);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_163
  //                           5534023.2650625384464
  // *                              -0.2343453
  //   ------------------------------------------------
  //                          -1296872.34225806009098314192
  //                          {{37495248, 234345300, 7030359, -2146172928}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 37495248);
  ck_assert_int_eq(res.bits[1], 234345300);
  ck_assert_int_eq(res.bits[2], 7030359);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_164
  //                           5534023.2650625384464
  // *                             127.2343
  //   ------------------------------------------------
  //                         704117576.31394653545079152
  //                         {{20357488, 127234300, 3817029, 1114112}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 20357488);
  ck_assert_int_eq(res.bits[1], 127234300);
  ck_assert_int_eq(res.bits[2], 3817029);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_165
  //                           5534023.2650625384464
  // *                     -2147483648
  //   ------------------------------------------------
  //                -11884224469373371.011015324467
  //                {{858993459, 1717986919, 644245099, -2146697216}};

  es_decimal one = {{16, 100, 3, 851968}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 858993459);
  ck_assert_int_eq(res.bits[1], 1717986919);
  ck_assert_int_eq(res.bits[2], 644245099);
  ck_assert_int_eq(res.bits[3], -2146697216);

#test mul_166
  //                               -63.31900243533454217608892
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                         -35040882.993255304858948405311
  //                         {{-785315777, 1524233844, 1899570073, -2146107392}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -785315777);
  ck_assert_int_eq(res.bits[1], 1524233844);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_167
  //                               -63.31900243533454217608892
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                          35040882.993255304858948405311
  //                          {{-785315777, 1524233844, 1899570073, 1376256}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -785315777);
  ck_assert_int_eq(res.bits[1], 1524233844);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], 1376256);

#test mul_168
  //                               -63.31900243533454217608892
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                              3504.0882987821683025727488412
  //                              {{71336348, 259120176, 1899570073, 1638400}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 71336348);
  ck_assert_int_eq(res.bits[1], 259120176);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], 1638400);

#test mul_169
  //                               -63.31900243533454217608892
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                                -3.5040883259769288646251204726
  //                                {{-979939210, -847653208, 1899570087, -2145648640}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -979939210);
  ck_assert_int_eq(res.bits[1], -847653208);
  ck_assert_int_eq(res.bits[2], 1899570087);
  ck_assert_int_eq(res.bits[3], -2145648640);

#test mul_170
  //                               -63.31900243533454217608892
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                        -350408832.59769288650050344872
  //                        {{-1475766360, -847653207, 1899570087, -2146172928}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1475766360);
  ck_assert_int_eq(res.bits[1], -847653207);
  ck_assert_int_eq(res.bits[2], 1899570087);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_171
  //                               -63.31900243533454217608892
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                              4009.2960694059016829498809670
  //                              {{589552966, 1261587315, -2121523542, 1638400}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 589552966);
  ck_assert_int_eq(res.bits[1], 1261587315);
  ck_assert_int_eq(res.bits[2], -2121523542);
  ck_assert_int_eq(res.bits[3], 1638400);

#test mul_172
  //                               -63.31900243533454217608892
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                         -11680294.331991611768988615831
  //                         {{666223767, -2144170241, 633190024, -2146107392}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_173
  //                               -63.31900243533454217608892
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_174
  //                               -63.31900243533454217608892
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_175
  //                               -63.31900243533454217608892
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //            -116802943319916117689.88615831
  //            {{666223767, -2144170241, 633190024, -2146959360}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146959360);

#test mul_176
  //                               -63.31900243533454217608892
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                     -116802943319.91611768988615831
  //                     {{666223767, -2144170241, 633190024, -2146369536}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_177
  //                               -63.31900243533454217608892
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //             116802943319916117835.51986391
  //             {{-1950274857, -2144170238, 633190024, 524288}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1950274857);
  ck_assert_int_eq(res.bits[1], -2144170238);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], 524288);

#test mul_178
  //                               -63.31900243533454217608892
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                     -116802943700.65038023503485716
  //                     {{437885716, -1869444492, 633190026, -2146369536}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 437885716);
  ck_assert_int_eq(res.bits[1], -1869444492);
  ck_assert_int_eq(res.bits[2], 633190026);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_179
  //                               -63.31900243533454217608892
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //             116802943319916117689.88615831
  //             {{666223767, -2144170241, 633190024, 524288}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], 524288);

#test mul_180
  //                               -63.31900243533454217608892
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                -0.0000000063319002435334542176
  //                                {{-1976200352, 1857702204, 3, -2145648640}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1976200352);
  ck_assert_int_eq(res.bits[1], 1857702204);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], -2145648640);

#test mul_181
  //                               -63.31900243533454217608892
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                 0.0000000063319002435334542176
  //                                 {{-1976200352, 1857702204, 3, 1835008}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1976200352);
  ck_assert_int_eq(res.bits[1], 1857702204);
  ck_assert_int_eq(res.bits[2], 3);
  ck_assert_int_eq(res.bits[3], 1835008);

#test mul_182
  //                               -63.31900243533454217608892
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                         -11680294.329272081322237553697
  //                         {{-851383263, 1517607030, 633190024, -2146107392}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -851383263);
  ck_assert_int_eq(res.bits[1], 1517607030);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_183
  //                               -63.31900243533454217608892
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                          -1168029.4331991611768988615831
  //                          {{666223767, -2144170241, 633190024, -2146041856}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146041856);

#test mul_184
  //                               -63.31900243533454217608892
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                           1168029.4356467385789748175043
  //                           {{1439785155, -740427318, 633190025, 1441792}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1439785155);
  ck_assert_int_eq(res.bits[1], -740427318);
  ck_assert_int_eq(res.bits[2], 633190025);
  ck_assert_int_eq(res.bits[3], 1441792);

#test mul_185
  //                               -63.31900243533454217608892
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                           1168029.4331991611768988615831
  //                           {{666223767, -2144170241, 633190024, 1441792}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], 1441792);

#test mul_186
  //                               -63.31900243533454217608892
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                      116802943319.91611768988615831
  //                      {{666223767, -2144170241, 633190024, 1114112}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_187
  //                               -63.31900243533454217608892
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //             350408829932553048589.48405311
  //             {{-785315777, 1524233844, 1899570073, 524288}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -785315777);
  ck_assert_int_eq(res.bits[1], 1524233844);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], 524288);

#test mul_188
  //                               -63.31900243533454217608892
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                      116802943347.11142217006058015
  //                      {{-844756449, -1510980217, 633190024, 1114112}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -844756449);
  ck_assert_int_eq(res.bits[1], -1510980217);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_189
  //                               -63.31900243533454217608892
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                     -350408829932.55304858948405311
  //                     {{-785315777, 1524233844, 1899570073, -2146369536}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -785315777);
  ck_assert_int_eq(res.bits[1], 1524233844);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_190
  //                               -63.31900243533454217608892
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                      350408829932.55304858948405311
  //                      {{-785315777, 1524233844, 1899570073, 1114112}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -785315777);
  ck_assert_int_eq(res.bits[1], 1524233844);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_191
  //                               -63.31900243533454217608892
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //                    11680294334711.142217006058015
  //                    {{-844756449, -1510980217, 633190024, 983040}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -844756449);
  ck_assert_int_eq(res.bits[1], -1510980217);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], 983040);

#test mul_192
  //                               -63.31900243533454217608892
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                          35040882.993255304864647115530
  //                          {{618427146, 1524233846, 1899570073, 1376256}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 618427146);
  ck_assert_int_eq(res.bits[1], 1524233846);
  ck_assert_int_eq(res.bits[2], 1899570073);
  ck_assert_int_eq(res.bits[3], 1376256);

#test mul_193
  //                               -63.31900243533454217608892
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //                   -11680294334711.142217006058015
  //                   {{-844756449, -1510980217, 633190024, -2146500608}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -844756449);
  ck_assert_int_eq(res.bits[1], -1510980217);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146500608);

#test mul_194
  //                               -63.31900243533454217608892
  // *                              10
  //   ------------------------------------------------
  //                              -633.19002435334542176088920
  //                              {{324440, 1000, 3432530, -2145976320}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 324440);
  ck_assert_int_eq(res.bits[1], 1000);
  ck_assert_int_eq(res.bits[2], 3432530);
  ck_assert_int_eq(res.bits[3], -2145976320);

#test mul_195
  //                               -63.31900243533454217608892
  // *                      -133456435
  //   ------------------------------------------------
  //                        8450328332.776066031177969506
  //                        {{592195426, -727648752, 458093216, 1179648}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 592195426);
  ck_assert_int_eq(res.bits[1], -727648752);
  ck_assert_int_eq(res.bits[2], 458093216);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_196
  //                               -63.31900243533454217608892
  // *                              -0.2343453
  //   ------------------------------------------------
  //                                14.838510621409203886618210784
  //                                {{-1796574752, -1679097868, 804397272, 1769472}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1796574752);
  ck_assert_int_eq(res.bits[1], -1679097868);
  ck_assert_int_eq(res.bits[2], 804397272);
  ck_assert_int_eq(res.bits[3], 1769472);

#test mul_197
  //                               -63.31900243533454217608892
  // *                             127.2343
  //   ------------------------------------------------
  //                             -8056.348951558085739595150474
  //                             {{-456936310, -949060539, 436735551, -2145910784}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -456936310);
  ck_assert_int_eq(res.bits[1], -949060539);
  ck_assert_int_eq(res.bits[2], 436735551);
  ck_assert_int_eq(res.bits[3], -2145910784);

#test mul_198
  //                               -63.31900243533454217608892
  // *                     -2147483648
  //   ------------------------------------------------
  //                      135976522337.55310673271729229
  //                      {{-839898035, -1602048572, 737130204, 1114112}};

  es_decimal one = {{32444, 100, 343253, -2145976320}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -839898035);
  ck_assert_int_eq(res.bits[1], -1602048572);
  ck_assert_int_eq(res.bits[2], 737130204);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_199
  //                            184467.44078004518913
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                      102084710115.89562030721259747
  //                      {{-1075914525, 1829806019, 553402322, 1114112}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_200
  //                            184467.44078004518913
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                     -102084710115.89562030721259747
  //                     {{-1075914525, 1829806019, 553402322, -2146369536}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_201
  //                            184467.44078004518913
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                         -10208471.010006583343139312320
  //                         {{126407360, 1461240073, 553402322, -2146107392}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_202
  //                            184467.44078004518913
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                             10208.471089233161314438326752
  //                             {{-1801868832, -1567221264, 553402326, 1572864}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_203
  //                            184467.44078004518913
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                     1020847108923.3161315545131397
  //                     {{-695064187, -1567221264, 553402326, 1048576}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1048576);

#test mul_204
  //                            184467.44078004518913
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                         -11680294.331991611768988615831
  //                         {{666223767, -2144170241, 633190024, -2146107392}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_205
  //                            184467.44078004518913
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                       34028236707.939478854724351485
  //                       {{1652684285, 987621807, 1844674408, 1179648}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_206
  //                            184467.44078004518913
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_207
  //                            184467.44078004518913
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_208
  //                            184467.44078004518913
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //          340282367079394788547243.51485
  //          {{1652684285, 987621807, 1844674408, 327680}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 327680);

#test mul_209
  //                            184467.44078004518913
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                   340282367079394.78854724351485
  //                   {{1652684285, 987621807, 1844674408, 917504}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 917504);

#test mul_210
  //                            184467.44078004518913
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //         -340282367079394788971518.62864
  //         {{1130522704, 987621817, 1844674408, -2147155968}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1130522704);
  ck_assert_int_eq(res.bits[1], 987621817);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2147155968);

#test mul_211
  //                            184467.44078004518913
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                   340282368188589.06400519865825
  //                   {{-1756117535, 1043259740, 1844674414, 917504}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1756117535);
  ck_assert_int_eq(res.bits[1], 1043259740);
  ck_assert_int_eq(res.bits[2], 1844674414);
  ck_assert_int_eq(res.bits[3], 917504);

#test mul_212
  //                            184467.44078004518913
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //         -340282367079394788547243.51485
  //         {{1652684285, 987621807, 1844674408, -2147155968}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2147155968);

#test mul_213
  //                            184467.44078004518913
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                 0.000018446744078004518913
  //                                 {{1, 1, 1, 1572864}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 1);
  ck_assert_int_eq(res.bits[2], 1);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_214
  //                            184467.44078004518913
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                -0.000018446744078004518913
  //                                {{1, 1, 1, -2145910784}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 1);
  ck_assert_int_eq(res.bits[2], 1);
  ck_assert_int_eq(res.bits[3], -2145910784);

#test mul_215
  //                            184467.44078004518913
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                       34028236700.016662601453243318
  //                       {{-1785230410, -857052601, 1844674407, 1179648}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1785230410);
  ck_assert_int_eq(res.bits[1], -857052601);
  ck_assert_int_eq(res.bits[2], 1844674407);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_216
  //                            184467.44078004518913
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                        3402823670.7939478854724351485
  //                        {{1652684285, 987621807, 1844674408, 1245184}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 1245184);

#test mul_217
  //                            184467.44078004518913
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                       -3402823677.9244825134164324989
  //                       {{-1765821827, 409822293, 1844674412, -2146238464}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1765821827);
  ck_assert_int_eq(res.bits[1], 409822293);
  ck_assert_int_eq(res.bits[2], 1844674412);
  ck_assert_int_eq(res.bits[3], -2146238464);

#test mul_218
  //                            184467.44078004518913
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                       -3402823670.7939478854724351485
  //                       {{1652684285, 987621807, 1844674408, -2146238464}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2146238464);

#test mul_219
  //                            184467.44078004518913
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                  -340282367079394.78854724351485
  //                  {{1652684285, 987621807, 1844674408, -2146566144}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2146566144);

#test mul_220
  //                            184467.44078004518913
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //        -1020847101158956203072125.9747
  //        {{-1075914525, 1829806019, 553402322, -2147221504}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2147221504);

#test mul_221
  //                            184467.44078004518913
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                  -340282367158622.95111684808468
  //                  {{190013204, -1462671080, 1844674408, -2146566144}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 190013204);
  ck_assert_int_eq(res.bits[1], -1462671080);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2146566144);

#test mul_222
  //                            184467.44078004518913
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                  1020847101158956.2030721259747
  //                  {{-1075914525, 1829806019, 553402322, 851968}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_223
  //                            184467.44078004518913
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                 -1020847101158956.2030721259747
  //                 {{-1075914525, 1829806019, 553402322, -2146631680}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_224
  //                            184467.44078004518913
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //                -34028236715862295.111684808468
  //                {{190013204, -1462671080, 1844674408, -2146697216}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 190013204);
  ck_assert_int_eq(res.bits[1], -1462671080);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2146697216);

#test mul_225
  //                            184467.44078004518913
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                     -102084710115.89562032381466714
  //                     {{584292442, 1829806020, 553402322, -2146369536}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 584292442);
  ck_assert_int_eq(res.bits[1], 1829806020);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_226
  //                            184467.44078004518913
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //                 34028236715862295.111684808468
  //                 {{190013204, -1462671080, 1844674408, 786432}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 190013204);
  ck_assert_int_eq(res.bits[1], -1462671080);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 786432);

#test mul_227
  //                            184467.44078004518913
  // *                              10
  //   ------------------------------------------------
  //                           1844674.40780045189130
  //                           {{10, 10, 10, 917504}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 10);
  ck_assert_int_eq(res.bits[1], 10);
  ck_assert_int_eq(res.bits[2], 10);
  ck_assert_int_eq(res.bits[3], 917504);

#test mul_228
  //                            184467.44078004518913
  // *                      -133456435
  //   ------------------------------------------------
  //                   -24618367020078.45008019055155
  //                   {{133456435, 133456435, 133456435, -2146566144}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 133456435);
  ck_assert_int_eq(res.bits[1], 133456435);
  ck_assert_int_eq(res.bits[2], 133456435);
  ck_assert_int_eq(res.bits[3], -2146566144);

#test mul_229
  //                            184467.44078004518913
  // *                              -0.2343453
  //   ------------------------------------------------
  //                            -43229.077749831923860226589
  //                            {{2343453, 2343453, 2343453, -2146107392}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2343453);
  ck_assert_int_eq(res.bits[1], 2343453);
  ck_assert_int_eq(res.bits[2], 2343453);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_230
  //                            184467.44078004518913
  // *                             127.2343
  //   ------------------------------------------------
  //                          23470585.700440503607323159
  //                          {{1272343, 1272343, 1272343, 1179648}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1272343);
  ck_assert_int_eq(res.bits[1], 1272343);
  ck_assert_int_eq(res.bits[2], 1272343);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_231
  //                            184467.44078004518913
  // *                     -2147483648
  //   ------------------------------------------------
  //                  -396140812663555.40835774234624
  //                  {{-2147483648, -2147483648, -2147483648, -2146566144}};

  es_decimal one = {{1, 1, 1, 917504}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -2147483648);
  ck_assert_int_eq(res.bits[1], -2147483648);
  ck_assert_int_eq(res.bits[2], -2147483648);
  ck_assert_int_eq(res.bits[3], -2146566144);

#test mul_232
  //                                 0.0000000000000
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_233
  //                                 0.0000000000000
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_234
  //                                 0.0000000000000
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_235
  //                                 0.0000000000000
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_236
  //                                 0.0000000000000
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_237
  //                                 0.0000000000000
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_238
  //                                 0.0000000000000
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_239
  //                                 0.0000000000000
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0.00000000000000000000000000
  //                                 {{0, 0, 0, 1703936}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1703936);

#test mul_240
  //                                 0.0000000000000
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0.000000000000000000000000000
  //                                 {{0, 0, 0, 1769472}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1769472);

#test mul_241
  //                                 0.0000000000000
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_242
  //                                 0.0000000000000
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_243
  //                                 0.0000000000000
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_244
  //                                 0.0000000000000
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_245
  //                                 0.0000000000000
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_246
  //                                 0.0000000000000
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                 0.00000000000000000000000
  //                                 {{0, 0, 0, 1507328}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1507328);

#test mul_247
  //                                 0.0000000000000
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                 0.00000000000000000000000
  //                                 {{0, 0, 0, -2145976320}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2145976320);

#test mul_248
  //                                 0.0000000000000
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_249
  //                                 0.0000000000000
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_250
  //                                 0.0000000000000
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_251
  //                                 0.0000000000000
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_252
  //                                 0.0000000000000
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_253
  //                                 0.0000000000000
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_254
  //                                 0.0000000000000
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_255
  //                                 0.0000000000000
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_256
  //                                 0.0000000000000
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_257
  //                                 0.0000000000000
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_258
  //                                 0.0000000000000
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_259
  //                                 0.0000000000000
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_260
  //                                 0.0000000000000
  // *                              10
  //   ------------------------------------------------
  //                                 0.0000000000000
  //                                 {{0, 0, 0, 851968}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_261
  //                                 0.0000000000000
  // *                      -133456435
  //   ------------------------------------------------
  //                                 0.0000000000000
  //                                 {{0, 0, 0, -2146631680}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_262
  //                                 0.0000000000000
  // *                              -0.2343453
  //   ------------------------------------------------
  //                                 0.00000000000000000000
  //                                 {{0, 0, 0, -2146172928}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_263
  //                                 0.0000000000000
  // *                             127.2343
  //   ------------------------------------------------
  //                                 0.00000000000000000
  //                                 {{0, 0, 0, 1114112}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1114112);

#test mul_264
  //                                 0.0000000000000
  // *                     -2147483648
  //   ------------------------------------------------
  //                                 0.0000000000000
  //                                 {{0, 0, 0, -2146631680}};

  es_decimal one = {{0, 0, 0, 851968}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_265
  //                                 0.00000000000000
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_266
  //                                 0.00000000000000
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_267
  //                                 0.00000000000000
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_268
  //                                 0.00000000000000
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_269
  //                                 0.00000000000000
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_270
  //                                 0.00000000000000
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_271
  //                                 0.00000000000000
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_272
  //                                 0.00000000000000
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0.000000000000000000000000000
  //                                 {{0, 0, 0, 1769472}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1769472);

#test mul_273
  //                                 0.00000000000000
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0.0000000000000000000000000000
  //                                 {{0, 0, 0, 1835008}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1835008);

#test mul_274
  //                                 0.00000000000000
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_275
  //                                 0.00000000000000
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_276
  //                                 0.00000000000000
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_277
  //                                 0.00000000000000
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_278
  //                                 0.00000000000000
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_279
  //                                 0.00000000000000
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                 0.000000000000000000000000
  //                                 {{0, 0, 0, 1572864}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1572864);

#test mul_280
  //                                 0.00000000000000
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                 0.000000000000000000000000
  //                                 {{0, 0, 0, -2145910784}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2145910784);

#test mul_281
  //                                 0.00000000000000
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_282
  //                                 0.00000000000000
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_283
  //                                 0.00000000000000
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_284
  //                                 0.00000000000000
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_285
  //                                 0.00000000000000
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_286
  //                                 0.00000000000000
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_287
  //                                 0.00000000000000
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_288
  //                                 0.00000000000000
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_289
  //                                 0.00000000000000
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_290
  //                                 0.00000000000000
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_291
  //                                 0.00000000000000
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_292
  //                                 0.00000000000000
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_293
  //                                 0.00000000000000
  // *                              10
  //   ------------------------------------------------
  //                                 0.00000000000000
  //                                 {{0, 0, 0, 917504}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 917504);

#test mul_294
  //                                 0.00000000000000
  // *                      -133456435
  //   ------------------------------------------------
  //                                 0.00000000000000
  //                                 {{0, 0, 0, -2146566144}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2146566144);

#test mul_295
  //                                 0.00000000000000
  // *                              -0.2343453
  //   ------------------------------------------------
  //                                 0.000000000000000000000
  //                                 {{0, 0, 0, -2146107392}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2146107392);

#test mul_296
  //                                 0.00000000000000
  // *                             127.2343
  //   ------------------------------------------------
  //                                 0.000000000000000000
  //                                 {{0, 0, 0, 1179648}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 1179648);

#test mul_297
  //                                 0.00000000000000
  // *                     -2147483648
  //   ------------------------------------------------
  //                                 0.00000000000000
  //                                 {{0, 0, 0, -2146566144}};

  es_decimal one = {{0, 0, 0, 917504}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], -2146566144);

#test mul_298
  //               1844674407800451891.3
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //         1020847101158956203072125.9747
  //         {{-1075914525, 1829806019, 553402322, 262144}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 262144);

#test mul_299
  //               1844674407800451891.3
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //        -1020847101158956203072125.9747
  //        {{-1075914525, 1829806019, 553402322, -2147221504}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2147221504);

#test mul_300
  //               1844674407800451891.3
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //            -102084710100065833431.39312320
  //            {{126407360, 1461240073, 553402322, -2146959360}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146959360);

#test mul_301
  //               1844674407800451891.3
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                102084710892331613.14438326752
  //                {{-1801868832, -1567221264, 553402326, 720896}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 720896);

#test mul_302
  //               1844674407800451891.3
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //        10208471089233161315545131.397
  //        {{-695064187, -1567221264, 553402326, 196608}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 196608);

#test mul_303
  //               1844674407800451891.3
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //            -116802943319916117689.88615831
  //            {{666223767, -2144170241, 633190024, -2146959360}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146959360);

#test mul_304
  //               1844674407800451891.3
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //          340282367079394788547243.51485
  //          {{1652684285, 987621807, 1844674408, 327680}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 327680);

#test mul_305
  //               1844674407800451891.3
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_306
  //               1844674407800451891.3
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_307
  //               1844674407800451891.3
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 1);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_308
  //               1844674407800451891.3
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //      3402823670793947885472435148.5
  //      {{1652684285, 987621807, 1844674408, 65536}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 65536);

#test mul_309
  //               1844674407800451891.3
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 2);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_310
  //               1844674407800451891.3
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //      3402823681885890640051986582.5
  //      {{-1756117535, 1043259740, 1844674414, 65536}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1756117535);
  ck_assert_int_eq(res.bits[1], 1043259740);
  ck_assert_int_eq(res.bits[2], 1844674414);
  ck_assert_int_eq(res.bits[3], 65536);

#test mul_311
  //               1844674407800451891.3
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 2);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_312
  //               1844674407800451891.3
  // *                               0.0000000001
  //   ------------------------------------------------
  //                         184467440.78004518913
  //                         {{1, 1, 1, 720896}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 1);
  ck_assert_int_eq(res.bits[2], 1);
  ck_assert_int_eq(res.bits[3], 720896);

#test mul_313
  //               1844674407800451891.3
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                        -184467440.78004518913
  //                        {{1, 1, 1, -2146762752}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 1);
  ck_assert_int_eq(res.bits[2], 1);
  ck_assert_int_eq(res.bits[3], -2146762752);

#test mul_314
  //               1844674407800451891.3
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //          340282367000166626014532.43318
  //          {{-1785230410, -857052601, 1844674407, 327680}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1785230410);
  ck_assert_int_eq(res.bits[1], -857052601);
  ck_assert_int_eq(res.bits[2], 1844674407);
  ck_assert_int_eq(res.bits[3], 327680);

#test mul_315
  //               1844674407800451891.3
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //           34028236707939478854724.351485
  //           {{1652684285, 987621807, 1844674408, 393216}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 393216);

#test mul_316
  //               1844674407800451891.3
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //          -34028236779244825134164.324989
  //          {{-1765821827, 409822293, 1844674412, -2147090432}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1765821827);
  ck_assert_int_eq(res.bits[1], 409822293);
  ck_assert_int_eq(res.bits[2], 1844674412);
  ck_assert_int_eq(res.bits[3], -2147090432);

#test mul_317
  //               1844674407800451891.3
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //          -34028236707939478854724.351485
  //          {{1652684285, 987621807, 1844674408, -2147090432}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2147090432);

#test mul_318
  //               1844674407800451891.3
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //     -3402823670793947885472435148.5
  //     {{1652684285, 987621807, 1844674408, -2147418112}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2147418112);

#test mul_319
  //               1844674407800451891.3
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 2);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_320
  //               1844674407800451891.3
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //     -3402823671586229511168480846.8
  //     {{190013204, -1462671080, 1844674408, -2147418112}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 190013204);
  ck_assert_int_eq(res.bits[1], -1462671080);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2147418112);

#test mul_321
  //               1844674407800451891.3
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //     10208471011589562030721259747
  //     {{-1075914525, 1829806019, 553402322, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_322
  //               1844674407800451891.3
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //    -10208471011589562030721259747
  //    {{-1075914525, 1829806019, 553402322, -2147483648}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2147483648);

#test mul_323
  //               1844674407800451891.3
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 2);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_324
  //               1844674407800451891.3
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //        -1020847101158956203238146.6714
  //        {{584292442, 1829806020, 553402322, -2147221504}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 584292442);
  ck_assert_int_eq(res.bits[1], 1829806020);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2147221504);

#test mul_325
  //               1844674407800451891.3
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 1);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_326
  //               1844674407800451891.3
  // *                              10
  //   ------------------------------------------------
  //              18446744078004518913.0
  //              {{10, 10, 10, 65536}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 10);
  ck_assert_int_eq(res.bits[1], 10);
  ck_assert_int_eq(res.bits[2], 10);
  ck_assert_int_eq(res.bits[3], 65536);

#test mul_327
  //               1844674407800451891.3
  // *                      -133456435
  //   ------------------------------------------------
  //      -246183670200784500801905515.5
  //      {{133456435, 133456435, 133456435, -2147418112}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 133456435);
  ck_assert_int_eq(res.bits[1], 133456435);
  ck_assert_int_eq(res.bits[2], 133456435);
  ck_assert_int_eq(res.bits[3], -2147418112);

#test mul_328
  //               1844674407800451891.3
  // *                              -0.2343453
  //   ------------------------------------------------
  //               -432290777498319238.60226589
  //               {{2343453, 2343453, 2343453, -2146959360}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2343453);
  ck_assert_int_eq(res.bits[1], 2343453);
  ck_assert_int_eq(res.bits[2], 2343453);
  ck_assert_int_eq(res.bits[3], -2146959360);

#test mul_329
  //               1844674407800451891.3
  // *                             127.2343
  //   ------------------------------------------------
  //             234705857004405036073.23159
  //             {{1272343, 1272343, 1272343, 327680}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{1272343, 0, 0, 262144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1272343);
  ck_assert_int_eq(res.bits[1], 1272343);
  ck_assert_int_eq(res.bits[2], 1272343);
  ck_assert_int_eq(res.bits[3], 327680);

#test mul_330
  //               1844674407800451891.3
  // *                     -2147483648
  //   ------------------------------------------------
  //     -3961408126635554083577423462.4
  //     {{-2147483648, -2147483648, -2147483648, -2147418112}};

  es_decimal one = {{1, 1, 1, 65536}};
  es_decimal two = {{-2147483648, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -2147483648);
  ck_assert_int_eq(res.bits[1], -2147483648);
  ck_assert_int_eq(res.bits[2], -2147483648);
  ck_assert_int_eq(res.bits[3], -2147418112);

#test mul_331
  //                        1844674407.8004518913
  // *                          553402.32229718589441
  //   ------------------------------------------------
  //                  1020847101158956.2030721259747
  //                  {{-1075914525, 1829806019, 553402322, 851968}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 2, 3, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 851968);

#test mul_332
  //                        1844674407.8004518913
  // *                         -553402.32229718589441
  //   ------------------------------------------------
  //                 -1020847101158956.2030721259747
  //                 {{-1075914525, 1829806019, 553402322, -2146631680}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_333
  //                        1844674407.8004518913
  // *                             -55.340232221137244782625
  //   ------------------------------------------------
  //                     -102084710100.06583343139312320
  //                     {{126407360, 1461240073, 553402322, -2146369536}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{33, 2, 3000, -2146107392}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 126407360);
  ck_assert_int_eq(res.bits[1], 1461240073);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_334
  //                        1844674407.8004518913
  // *                               0.055340232650625384458
  //   ------------------------------------------------
  //                         102084710.89233161314438326752
  //                         {{-1801868832, -1567221264, 553402326, 1310720}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{10, 100, 3, 1376256}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1801868832);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 1310720);

#test mul_335
  //                        1844674407.8004518913
  // *                         5534023.2650625384464
  //   ------------------------------------------------
  //                 10208471089233161.315545131397
  //                 {{-695064187, -1567221264, 553402326, 786432}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{16, 100, 3, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -695064187);
  ck_assert_int_eq(res.bits[1], -1567221264);
  ck_assert_int_eq(res.bits[2], 553402326);
  ck_assert_int_eq(res.bits[3], 786432);

#test mul_336
  //                        1844674407.8004518913
  // *                             -63.31900243533454217608892
  //   ------------------------------------------------
  //                     -116802943319.91611768988615831
  //                     {{666223767, -2144170241, 633190024, -2146369536}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{32444, 100, 343253, -2145976320}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 666223767);
  ck_assert_int_eq(res.bits[1], -2144170241);
  ck_assert_int_eq(res.bits[2], 633190024);
  ck_assert_int_eq(res.bits[3], -2146369536);

#test mul_337
  //                        1844674407.8004518913
  // *                          184467.44078004518913
  //   ------------------------------------------------
  //                   340282367079394.78854724351485
  //                   {{1652684285, 987621807, 1844674408, 917504}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 1, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 917504);

#test mul_338
  //                        1844674407.8004518913
  // *                               0.0000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{0, 0, 0, 851968}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_339
  //                        1844674407.8004518913
  // *                               0.00000000000000
  //   ------------------------------------------------
  //                                 0
  //                                 {{0, 0, 0, 0}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{0, 0, 0, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[3], 0);

#test mul_340
  //                        1844674407.8004518913
  // *             1844674407800451891.3
  //   ------------------------------------------------
  //      3402823670793947885472435148.5
  //      {{1652684285, 987621807, 1844674408, 65536}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 1, 1, 65536}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 65536);

#test mul_341
  //                        1844674407.8004518913
  // *                      1844674407.8004518913
  //   ------------------------------------------------
  //               3402823670793947885.4724351485
  //               {{1652684285, 987621807, 1844674408, 655360}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 1, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 655360);

#test mul_342
  //                        1844674407.8004518913
  // *            -1844674407800451893.6
  //   ------------------------------------------------
  //     -3402823670793947889715186286.4
  //     {{1130522704, 987621817, 1844674408, -2147418112}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{24, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1130522704);
  ck_assert_int_eq(res.bits[1], 987621817);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2147418112);

#test mul_343
  //                        1844674407.8004518913
  // *                      1844674413.8134061057
  //   ------------------------------------------------
  //               3402823681885890640.0519865825
  //               {{-1756117535, 1043259740, 1844674414, 655360}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 15, 1, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1756117535);
  ck_assert_int_eq(res.bits[1], 1043259740);
  ck_assert_int_eq(res.bits[2], 1844674414);
  ck_assert_int_eq(res.bits[3], 655360);

#test mul_344
  //                        1844674407.8004518913
  // *            -1844674407800451891.3
  //   ------------------------------------------------
  //     -3402823670793947885472435148.5
  //     {{1652684285, 987621807, 1844674408, -2147418112}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 1, 1, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2147418112);

#test mul_345
  //                        1844674407.8004518913
  // *                               0.0000000001
  //   ------------------------------------------------
  //                                 0.18446744078004518913
  //                                 {{1, 1, 1, 1310720}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 0, 0, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 1);
  ck_assert_int_eq(res.bits[2], 1);
  ck_assert_int_eq(res.bits[3], 1310720);

#test mul_346
  //                        1844674407.8004518913
  // *                              -0.0000000001
  //   ------------------------------------------------
  //                                -0.18446744078004518913
  //                                {{1, 1, 1, -2146172928}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 0, 0, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1);
  ck_assert_int_eq(res.bits[1], 1);
  ck_assert_int_eq(res.bits[2], 1);
  ck_assert_int_eq(res.bits[3], -2146172928);

#test mul_347
  //                        1844674407.8004518913
  // *                          184467.44073709551617
  //   ------------------------------------------------
  //                   340282367000166.62601453243318
  //                   {{-1785230410, -857052601, 1844674407, 917504}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 0, 1, 917504}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1785230410);
  ck_assert_int_eq(res.bits[1], -857052601);
  ck_assert_int_eq(res.bits[2], 1844674407);
  ck_assert_int_eq(res.bits[3], 917504);

#test mul_348
  //                        1844674407.8004518913
  // *                           18446.744078004518913
  //   ------------------------------------------------
  //                    34028236707939.478854724351485
  //                    {{1652684285, 987621807, 1844674408, 983040}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 1, 1, 983040}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 983040);

#test mul_349
  //                        1844674407.8004518913
  // *                          -18446.744116659224577
  //   ------------------------------------------------
  //                   -34028236779244.825134164324989
  //                   {{-1765821827, 409822293, 1844674412, -2146500608}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 10, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1765821827);
  ck_assert_int_eq(res.bits[1], 409822293);
  ck_assert_int_eq(res.bits[2], 1844674412);
  ck_assert_int_eq(res.bits[3], -2146500608);

#test mul_350
  //                        1844674407.8004518913
  // *                          -18446.744078004518913
  //   ------------------------------------------------
  //                   -34028236707939.478854724351485
  //                   {{1652684285, 987621807, 1844674408, -2146500608}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 1, 1, -2146500608}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2146500608);

#test mul_351
  //                        1844674407.8004518913
  // *                     -1844674407.8004518913
  //   ------------------------------------------------
  //              -3402823670793947885.4724351485
  //              {{1652684285, 987621807, 1844674408, -2146828288}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 1, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 1652684285);
  ck_assert_int_eq(res.bits[1], 987621807);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2146828288);

#test mul_352
  //                        1844674407.8004518913
  // *            -5534023222971858944.1
  //   ------------------------------------------------
  //    -10208471011589562030721259747
  //    {{-1075914525, 1829806019, 553402322, -2147483648}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 2, 3, -2147418112}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2147483648);

#test mul_353
  //                        1844674407.8004518913
  // *                     -1844674408.2299486211
  //   ------------------------------------------------
  //              -3402823671586229511.1684808468
  //              {{190013204, -1462671080, 1844674408, -2146828288}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{3, 2, 1, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 190013204);
  ck_assert_int_eq(res.bits[1], -1462671080);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2146828288);

#test mul_354
  //                        1844674407.8004518913
  // *                      5534023222.9718589441
  //   ------------------------------------------------
  //              10208471011589562030.721259747
  //              {{-1075914525, 1829806019, 553402322, 589824}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 2, 3, 655360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], 589824);

#test mul_355
  //                        1844674407.8004518913
  // *                     -5534023222.9718589441
  //   ------------------------------------------------
  //             -10208471011589562030.721259747
  //             {{-1075914525, 1829806019, 553402322, -2146893824}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{1, 2, 3, -2146828288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], -1075914525);
  ck_assert_int_eq(res.bits[1], 1829806019);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146893824);

#test mul_356
  //                        1844674407.8004518913
  // *                   -184467440822.99486211
  //   ------------------------------------------------
  //            -340282367158622951116.84808468
  //            {{190013204, -1462671080, 1844674408, -2146959360}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{3, 2, 1, -2146959360}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 190013204);
  ck_assert_int_eq(res.bits[1], -1462671080);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], -2146959360);

#test mul_357
  //                        1844674407.8004518913
  // *                         -553402.32229718589450
  //   ------------------------------------------------
  //                 -1020847101158956.2032381466714
  //                 {{584292442, 1829806020, 553402322, -2146631680}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{10, 2, 3, -2146566144}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 584292442);
  ck_assert_int_eq(res.bits[1], 1829806020);
  ck_assert_int_eq(res.bits[2], 553402322);
  ck_assert_int_eq(res.bits[3], -2146631680);

#test mul_358
  //                        1844674407.8004518913
  // *                    184467440822.99486211
  //   ------------------------------------------------
  //             340282367158622951116.84808468
  //             {{190013204, -1462671080, 1844674408, 524288}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{3, 2, 1, 524288}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 190013204);
  ck_assert_int_eq(res.bits[1], -1462671080);
  ck_assert_int_eq(res.bits[2], 1844674408);
  ck_assert_int_eq(res.bits[3], 524288);

#test mul_359
  //                        1844674407.8004518913
  // *                              10
  //   ------------------------------------------------
  //                       18446744078.0045189130
  //                       {{10, 10, 10, 655360}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{10, 0, 0, 0}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 10);
  ck_assert_int_eq(res.bits[1], 10);
  ck_assert_int_eq(res.bits[2], 10);
  ck_assert_int_eq(res.bits[3], 655360);

#test mul_360
  //                        1844674407.8004518913
  // *                      -133456435
  //   ------------------------------------------------
  //               -246183670200784500.8019055155
  //               {{133456435, 133456435, 133456435, -2146828288}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{133456435, 0, 0, -2147483648}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 133456435);
  ck_assert_int_eq(res.bits[1], 133456435);
  ck_assert_int_eq(res.bits[2], 133456435);
  ck_assert_int_eq(res.bits[3], -2146828288);

#test mul_361
  //                        1844674407.8004518913
  // *                              -0.2343453
  //   ------------------------------------------------
  //                        -432290777.49831923860226589
  //                        {{2343453, 2343453, 2343453, -2146369536}};

  es_decimal one = {{1, 1, 1, 655360}};
  es_decimal two = {{2343453, 0, 0, -2147024896}};
  es_decimal res = {{0, 0, 0, 0}};
  ck_assert_int_eq(es_mul(one, two, &res), 0);
  ck_assert_int_eq(res.bits[0], 2343453);
  ck_assert_int_eq(res.bits[1], 2343453);
  ck_assert_int_eq(res.bits[2], 2343453);
  ck_assert_int_eq(res.bits[3], -2146369536);